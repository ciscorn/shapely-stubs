from collections.abc import Sequence
from typing import Any, Iterator, overload

import numpy
import shapely
from shapely._typing import _NDArrayFloat
from shapely.constructive import BufferCapStyle as BufferCapStyle
from shapely.constructive import BufferJoinStyle as BufferJoinStyle
from shapely.coords import CoordinateSequence as CoordinateSequence
from shapely.errors import GeometryTypeError as GeometryTypeError
from shapely.errors import GEOSException as GEOSException
from shapely.errors import ShapelyDeprecationWarning as ShapelyDeprecationWarning

from .._typing import (
    _ArrayLikeFloat,
    _ArrayLikeGeometry,
    _NDArrayBool,
    _NDArrayFloat,
    _NDArrayGeometry,
    _NDArrayObject,
)
from .point import Point

GEOMETRY_TYPES: Sequence[str]

def geom_factory(g, parent: Any = ...): ...
def dump_coords(geom) -> list[Any]: ...

class CAP_STYLE:
    round: int
    flat: int
    square: int

class JOIN_STYLE:
    round: int
    mitre: int
    bevel: int

class BaseGeometry(shapely.Geometry):
    def __new__(self): ...
    def __bool__(self) -> bool: ...
    def __nonzero__(self) -> bool: ...
    def __format__(self, format_spec) -> str: ...
    def __reduce__(self): ...
    @overload
    def __and__(self, other: BaseGeometry) -> BaseGeometry: ...
    @overload
    def __and__(self, other: _ArrayLikeGeometry) -> _NDArrayGeometry: ...
    @overload
    def __or__(self, other: BaseGeometry) -> BaseGeometry: ...
    @overload
    def __or__(self, other: _ArrayLikeGeometry) -> _NDArrayGeometry: ...
    @overload
    def __sub__(self, other: BaseGeometry) -> BaseGeometry: ...
    @overload
    def __sub__(self, other: _ArrayLikeGeometry) -> _NDArrayGeometry: ...
    @overload
    def __xor__(self, other: BaseGeometry) -> BaseGeometry: ...
    @overload
    def __xor__(self, other: _ArrayLikeGeometry) -> _NDArrayGeometry: ...
    @property
    def coords(self) -> CoordinateSequence: ...
    @property
    def xy(self) -> tuple[_NDArrayFloat, _NDArrayFloat]: ...
    @property
    def __geo_interface__(self) -> tuple[str, Any]: ...
    def geometryType(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def wkt(self) -> str: ...
    @property
    def wkb(self) -> bytes: ...
    @property
    def wkb_hex(self) -> str: ...
    def svg(self, scale_factor: float = ..., *args, **kwargs) -> str: ...
    @property
    def geom_type(self) -> str: ...
    @property
    def area(self) -> numpy.float64: ...
    @overload
    def distance(self, other: BaseGeometry) -> numpy.float64: ...
    @overload
    def distance(self, other: _NDArrayGeometry) -> _NDArrayFloat: ...
    @overload
    def hausdorff_distance(self, other: BaseGeometry) -> float: ...
    @overload
    def hausdorff_distance(self, other: _ArrayLikeGeometry) -> _NDArrayFloat: ...
    @property
    def length(self) -> numpy.float64: ...
    @property
    def minimum_clearance(self) -> numpy.float64: ...
    @property
    def boundary(self) -> BaseGeometry: ...
    @property
    def bounds(self) -> tuple[float, float, float, float]: ...
    @property
    def centroid(self) -> Point: ...
    def point_on_surface(self) -> Point: ...
    def representative_point(self) -> Point: ...
    @property
    def convex_hull(self) -> BaseGeometry: ...
    @property
    def envelope(self) -> BaseGeometry: ...
    @property
    def oriented_envelope(self) -> BaseGeometry: ...
    @property
    def minimum_rotated_rectangle(self) -> BaseGeometry: ...
    @overload
    def buffer(
        self,
        distance: float,
        quad_segs: int = ...,
        cap_style: str = ...,
        join_style: str = ...,
        mitre_limit: float = ...,
        single_sided: bool = ...,
        **kwargs
    ) -> BaseGeometry: ...
    @overload
    def buffer(
        self,
        distance: _ArrayLikeFloat,
        quad_segs: int = ...,
        cap_style: str = ...,
        join_style: str = ...,
        mitre_limit: float = ...,
        single_sided: bool = ...,
        **kwargs
    ) -> _NDArrayGeometry: ...
    @overload
    def simplify(
        self, tolerance: float, preserve_topology: bool = ...
    ) -> BaseGeometry: ...
    @overload
    def simplify(
        self, tolerance: _ArrayLikeFloat, preserve_topology: bool = ...
    ) -> _NDArrayGeometry: ...
    def normalize(self) -> BaseGeometry: ...
    @overload
    def difference(
        self, other: BaseGeometry, grid_size: float | None = ...
    ) -> BaseGeometry: ...
    @overload
    def difference(
        self, other: _ArrayLikeGeometry, grid_size: float | None = ...
    ) -> _NDArrayGeometry: ...
    @overload
    def intersection(
        self, other: BaseGeometry, grid_size: float | None = ...
    ) -> BaseGeometry: ...
    @overload
    def intersection(
        self, other: _ArrayLikeGeometry, grid_size: float | None = ...
    ) -> _NDArrayGeometry: ...
    @overload
    def symmetric_difference(
        self, other: BaseGeometry, grid_size: float | None = ...
    ) -> BaseGeometry: ...
    @overload
    def symmetric_difference(
        self, other: _ArrayLikeGeometry, grid_size: float | None = ...
    ) -> _NDArrayGeometry: ...
    @overload
    def union(
        self, other: BaseGeometry, grid_size: float | None = ...
    ) -> BaseGeometry: ...
    @overload
    def union(
        self, other: _ArrayLikeGeometry, grid_size: float | None = ...
    ) -> _NDArrayGeometry: ...
    @property
    def has_z(self) -> bool: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def is_ring(self) -> bool: ...
    @property
    def is_closed(self) -> bool: ...
    @property
    def is_simple(self) -> bool: ...
    @property
    def is_valid(self) -> bool: ...
    @overload
    def relate(self, other: None) -> None: ...
    @overload
    def relate(self, other: BaseGeometry) -> str: ...
    @overload
    def relate(self, other: _NDArrayGeometry) -> _NDArrayObject: ...
    @overload
    def covers(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def covers(self, other: _NDArrayGeometry) -> _NDArrayBool: ...
    @overload
    def covered_by(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def covered_by(self, other: _NDArrayGeometry) -> _NDArrayBool: ...
    @overload
    def contains(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def contains(self, other: _NDArrayGeometry) -> _NDArrayBool: ...
    @overload
    def contains_properly(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def contains_properly(self, other: _NDArrayGeometry) -> _NDArrayBool: ...
    @overload
    def crosses(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def crosses(self, other: _NDArrayGeometry) -> _NDArrayBool: ...
    @overload
    def disjoint(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def disjoint(self, other: _NDArrayGeometry) -> _NDArrayBool: ...
    @overload
    def equals(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def equals(self, other: _NDArrayGeometry) -> _NDArrayBool: ...
    @overload
    def intersects(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def intersects(self, other: _NDArrayGeometry) -> _NDArrayBool: ...
    @overload
    def overlaps(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def overlaps(self, other: _NDArrayGeometry) -> _NDArrayBool: ...
    @overload
    def touches(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def touches(self, other: _NDArrayGeometry) -> _NDArrayBool: ...
    @overload
    def within(self, other: BaseGeometry | None) -> bool: ...
    @overload
    def within(self, other: _NDArrayGeometry) -> _NDArrayBool: ...
    @overload
    def dwithin(self, other: BaseGeometry | None, distance: float) -> bool: ...
    @overload
    def dwithin(
        self, other: BaseGeometry | _ArrayLikeGeometry | None, distance: _ArrayLikeFloat
    ) -> _NDArrayBool: ...
    @overload
    def dwithin(
        self, other: _ArrayLikeGeometry, distance: float | _ArrayLikeFloat
    ) -> _NDArrayBool: ...
    @overload
    def equals_exact(self, other: BaseGeometry, tolerance: float) -> bool: ...
    @overload
    def equals_exact(
        self, other: BaseGeometry | _ArrayLikeGeometry, tolerance: _ArrayLikeFloat
    ) -> _NDArrayBool: ...
    @overload
    def equals_exact(
        self, other: _ArrayLikeGeometry, tolerance: float | _ArrayLikeFloat
    ) -> _NDArrayBool: ...
    @overload
    def almost_equals(self, other: BaseGeometry, decimal: int = ...) -> bool: ...
    @overload
    def almost_equals(
        self, other: _ArrayLikeGeometry, decimal: int = ...
    ) -> _NDArrayBool: ...
    @overload
    def relate_pattern(self, other: BaseGeometry, pattern: str) -> bool: ...
    @overload
    def relate_pattern(
        self, other: _ArrayLikeGeometry, pattern: str
    ) -> _NDArrayBool: ...
    @overload
    def line_locate_point(
        self, other: BaseGeometry | None, normalized: bool = ...
    ) -> float: ...
    @overload
    def line_locate_point(
        self, other: _ArrayLikeGeometry, normalized: bool = ...
    ) -> _NDArrayFloat: ...
    @overload
    def project(self, other: BaseGeometry | None, normalized: bool = ...) -> float: ...
    @overload
    def project(
        self, other: _ArrayLikeGeometry, normalized: bool = ...
    ) -> _NDArrayFloat: ...
    @overload
    def line_interpolate_point(
        self, distance: float, normalized: bool = ...
    ) -> Point: ...
    @overload
    def line_interpolate_point(
        self, distance: _ArrayLikeFloat, normalized: bool = ...
    ) -> _ArrayLikeGeometry: ...
    @overload
    def interpolate(self, distance: float, normalized: bool = ...) -> Point: ...
    @overload
    def interpolate(
        self, distance: _ArrayLikeFloat, normalized: bool = ...
    ) -> _ArrayLikeGeometry: ...
    @overload
    def segmentize(self, max_segment_length: float) -> BaseGeometry: ...
    @overload
    def segmentize(self, max_segment_length: _ArrayLikeFloat) -> _ArrayLikeGeometry: ...
    def reverse(self) -> BaseGeometry: ...

class BaseMultipartGeometry(BaseGeometry):
    @property
    def geoms(self) -> GeometrySequence: ...
    def __bool__(self) -> bool: ...
    def svg(self, scale_factor: float = ..., color: str | None = ...) -> str: ...  # type: ignore[override]

class GeometrySequence:
    def __init__(self, parent: BaseMultipartGeometry) -> None: ...
    def __iter__(self) -> Iterator[BaseGeometry]: ...
    def __len__(self) -> int: ...
    @overload
    def __getitem__(self, key: int | numpy.integer) -> BaseGeometry: ...
    @overload
    def __getitem__(self, key: slice) -> BaseMultipartGeometry: ...

class EmptyGeometry(BaseGeometry):
    def __new__(self): ...
